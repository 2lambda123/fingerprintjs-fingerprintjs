/* eslint-disable */

const magicBytes = [0x00, 0x61, 0x73, 0x6D]
const versionBytes = [0x01, 0x00, 0x00, 0x00]

const bigIntBytes = [
  0x01, 0x06, 0x01, 0x60, 0x01, 0x7E, 0x01, 0x7E,
  0x03, 0x02, 0x01, 0x00, 0x07, 0x05, 0x01, 0x01,
  0x62, 0x00, 0x00, 0x0A, 0x06, 0x01, 0x04, 0x00,
  0x20, 0x00, 0x0B, 0x00, 0x0C, 0x04, 0x6E, 0x61,
  0x6D, 0x65, 0x02, 0x05, 0x01, 0x00, 0x01, 0x00,
  0x00
]

const bulkMemoryBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x05, 0x03, 0x01, 0x00, 0x01, 0x0A,
  0x0E, 0x01, 0x0C, 0x00, 0x41, 0x00, 0x41, 0x00,
  0x41, 0x00, 0xFC, 0x0A, 0x00, 0x00, 0x0B, 0x00,
  0x0A, 0x04, 0x6E, 0x61, 0x6D, 0x65, 0x02, 0x03,
  0x01, 0x00, 0x00
]

const exceptionsBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x0A, 0x09, 0x01, 0x07, 0x00, 0x06,
  0x40, 0x07, 0x1A, 0x0B, 0x0B, 0x00, 0x0A, 0x04,
  0x6E, 0x61, 0x6D, 0x65, 0x02, 0x03, 0x01, 0x00,
  0x00
]

const multiValueBytes = [
  0x01, 0x06, 0x01, 0x60, 0x00, 0x02, 0x7F, 0x7F,
  0x03, 0x02, 0x01, 0x00, 0x0A, 0x08, 0x01, 0x06,
  0x00, 0x41, 0x00, 0x41, 0x00, 0x0B, 0x00, 0x0A,
  0x04, 0x6E, 0x61, 0x6D, 0x65, 0x02, 0x03, 0x01,
  0x00, 0x00
]

const mutableGlobalBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x02, 0x0A,
  0x01, 0x03, 0x65, 0x6E, 0x76, 0x01, 0x67, 0x03,
  0x7F, 0x01, 0x03, 0x02, 0x01, 0x00, 0x07, 0x05,
  0x01, 0x01, 0x66, 0x00, 0x00, 0x0A, 0x09, 0x01,
  0x07, 0x00, 0x41, 0xE4, 0x00, 0x24, 0x00, 0x0B,
  0x00, 0x0A, 0x04, 0x6E, 0x61, 0x6D, 0x65, 0x02,
  0x03, 0x01, 0x00, 0x00
]

const referenceTypesBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x0A, 0x07, 0x01, 0x05, 0x00, 0xD0,
  0x70, 0x1A, 0x0B, 0x00, 0x0A, 0x04, 0x6E, 0x61,
  0x6D, 0x65, 0x02, 0x03, 0x01, 0x00, 0x00
]

const saturateConversionsBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x0A, 0x0C, 0x01, 0x0A, 0x00, 0x43,
  0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x1A, 0x0B,
  0x00, 0x0A, 0x04, 0x6E, 0x61, 0x6D, 0x65, 0x02,
  0x03, 0x01, 0x00, 0x00
]

const signExtensionsBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x0A, 0x08, 0x01, 0x06, 0x00, 0x41,
  0x00, 0xC0, 0x1A, 0x0B, 0x00, 0x0A, 0x04, 0x6E,
  0x61, 0x6D, 0x65, 0x02, 0x03, 0x01, 0x00, 0x00
]

const simdBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x0A, 0x09, 0x01, 0x07, 0x00, 0x41,
  0x00, 0xFD, 0x0F, 0x1A, 0x0B, 0x00, 0x0A, 0x04,
  0x6E, 0x61, 0x6D, 0x65, 0x02, 0x03, 0x01, 0x00,
  0x00
]

const tailCallBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x0A, 0x06, 0x01, 0x04, 0x00, 0x12,
  0x00, 0x0B, 0x00, 0x0A, 0x04, 0x6E, 0x61, 0x6D,
  0x65, 0x02, 0x03, 0x01, 0x00, 0x00
]

const threadsBytes = [
  0x01, 0x04, 0x01, 0x60, 0x00, 0x00, 0x03, 0x02,
  0x01, 0x00, 0x05, 0x04, 0x01, 0x03, 0x01, 0x01,
  0x0A, 0x0B, 0x01, 0x09, 0x00, 0x41, 0x00, 0xFE,
  0x10, 0x02, 0x00, 0x1A, 0x0B, 0x00, 0x0A, 0x04,
  0x6E, 0x61, 0x6D, 0x65, 0x02, 0x03, 0x01, 0x00,
  0x00
]

/* eslint-enable */

const wa = WebAssembly
const u8a = Uint8Array
const validate = (bytes: number[]) => wa.validate(u8a.of(...magicBytes, ...versionBytes, ...bytes))

export interface WasmSupport {
  functionReferences: boolean
  streaming: boolean
  typeReflection: boolean
  bigInt: boolean
  bulkMemory: boolean
  exceptions: boolean
  multiValue: boolean
  mutableGlobal: boolean
  referenceTypes: boolean
  saturateConversions: boolean
  signExtensions: boolean
  simd: boolean
  tailCall: boolean
  threads: boolean
}

export default function getWasmSupport(): WasmSupport | undefined {
  if (typeof wa !== 'object' || typeof u8a !== 'function') {
    return
  }

  return {
    functionReferences: 'Function' in wa,
    streaming: 'instantiateStreaming' in wa && typeof wa.instantiateStreaming === 'function',
    typeReflection: 'Memory' in wa && 'type' in wa.Memory,
    bigInt: validate(bigIntBytes),
    bulkMemory: validate(bulkMemoryBytes),
    exceptions: validate(exceptionsBytes),
    multiValue: validate(multiValueBytes),
    mutableGlobal: validate(mutableGlobalBytes),
    referenceTypes: validate(referenceTypesBytes),
    saturateConversions: validate(saturateConversionsBytes),
    signExtensions: validate(signExtensionsBytes),
    simd: validate(simdBytes),
    tailCall: validate(tailCallBytes),
    threads: validate(threadsBytes),
  }
}
